// <auto-generated />
using System;
using MatchMe.Opportunities.Infrastructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatchMe.Opportunities.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("opportunities")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchMe.Opportunities.Infrastructure.EF.Models.OpportunityReadModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("MaxExperienceMonth")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaxSalaryYear")
                        .HasColumnType("numeric");

                    b.Property<int?>("MinExperienceMonth")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinSalaryYear")
                        .HasColumnType("numeric");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Responsible")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Opportunity", "opportunities");
                });

            modelBuilder.Entity("MatchMe.Opportunities.Infrastructure.EF.Models.OpportunitySkillReadModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Mandatory")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxExperience")
                        .HasColumnType("integer");

                    b.Property<int?>("MinExperience")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("OpportunityId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId1");

                    b.ToTable("OpportunitySkill", "opportunities");
                });

            modelBuilder.Entity("MatchMe.Opportunities.Infrastructure.EF.Models.OpportunitySkillReadModel", b =>
                {
                    b.HasOne("MatchMe.Opportunities.Infrastructure.EF.Models.OpportunityReadModel", "Opportunity")
                        .WithMany("Skills")
                        .HasForeignKey("OpportunityId1");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("MatchMe.Opportunities.Infrastructure.EF.Models.OpportunityReadModel", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
